// Athena Un-Grammar.
//
// This grammar specifies the structure of Athena's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

//
// The `Tokens` non-terminal definition is special. It should consist of alternating terminals
// of the form `terminal_name = lexer_regex`. 
// These are extracted from the grammar to generate
// lexer code (using the `logos` crate) automatically. If a terminal exists in the grammar but does
// not have a definition in `Tokens` it is taken as a verbatim lexer rule. (For instance, the ':'
// terminal gets a lexer rule `#[token(":")]` instead of a regex).
//
Tokens =
    'ident = (::)|~|([%&*+\\--9<->@-Z\\\\^_a-z|](!|[#-\']|[*+]|[\\--9]|[<-\\\\]|\\^|[_-z]|\\|)*)'
    | 'string = "([ !~#-\\[\\]-~]|(?:\\\\\\d+)|(?:\\\\["\\\\abnrftv])|(?:\\\\\\^[A-Z@\\[\\]/^]))*"'
    | 'char = `([ !~#-\\[\\]-~]|(?:\\\\\\d+)|(?:\\\\["\\\\abnrftv])|(?:\\\\\\^[A-Z@\\[\\]/^]))'
    | 'whitespace = [ \\t\\n\\r]+'
    | 'comment = #.*'
    | '#by = by|BY' // # indicates that it should be otherwise treated as a keyword/non complex token

//********************//
// Names and Literals //
//********************//

Name =
    'ident'

NameRef =
    'ident'

Literal =
    'string' | 'char'

MetaIdent =
    '\'' 'ident'

Unit =
    '(' ')'

MaybeTypedParam =
    Name
    | TypedParam
    | OpAnnotatedParam

TypedParam =
    Name ':' Sort

MaybeWildcardTypedParam =
    MaybeTypedParam
    | Wildcard

Wildcard =
    '_'

OpAnnotatedParam =
    Name ':' '(' 'OP' NameRef NameRef? ')'

//*********//
//  Misc   //
//*********//
PrefixBinding =
    '(' Pat Phrase ')'

//*******//
// Sorts //
//*******//

Sort =
    VarSort // ✅
    | IdentSort // ✅
    | CompoundSort // ✅

IdentSort =
    NameRef

VarSort =
    '\'' 'ident' 

CompoundSort =
    '(' Sort* ')'

//************//
// SourceFile //
//************//

SourceFile =
    Stmt*

//************//
// Statements //
//************//

Stmt =
    Dir // ✅
    | Phrase // ✅
    | DatatypeStmt
    | StructureStmt
    | DatatypesStmt
    | StructuresStmt

StructureNameDef =
    SortDecl

StructureConstructor =
    ConstantConstructor
    | CompoundConstructor

ConstantConstructor =
    Name

LimitedSort =
    IdentSort
    | LimitedCompoundSort
    
LimitedCompoundSort =
    '(' IdentSort LimitedSort* ')'

CompoundConstructor =
    '(' Name MaybeTaggedFieldSort ')'

MaybeTaggedFieldSort =
    (tag:Name ':')? LimitedSort

StructureDef =
    StructureNameDef ':=' (StructureConstructor ('|' StructureConstructor)*)

DatatypeStmt =
    'datatype' StructureDef

StructureStmt =
    'structure' StructureDef

DatatypesStmt =
    'datatypes' (StructureDef ('&&' StructureDef)*)

StructuresStmt =
    'structures' (StructureDef ('&&' StructureDef)*)

MetaDefinition =
    Definition
    | Domain
    | FunctionSymbol
    | Assertion

Definition =
    InfixDefineDir
    | PrefixDefineDir

Structure =
    StructureStmt
    | StructuresStmt

Datatype =
    DatatypeStmt
    | DatatypesStmt

Module =
    ModuleDir
    | ExtendModuleDir

Assertion =
    AssertDir
    | AssertClosedDir

Domain =
    DomainDir
    | DomainsDir

FunctionSymbol =
    DeclareDir
    | ConstantDeclareDir

//************//
// Directives //
//************//

Dir =
    ModuleDir // ✅
    | DomainDir // ✅
    | DomainsDir // ✅
    | DefineDir // ✅
    | LoadDir
    | AssertDir
    | AssertClosedDir
    | DeclareDir
    | ConstantDeclareDir
    | ExtendModuleDir
    | OpenDir
    | AssociativityDir
    | SetPrecedenceDir
    | OverloadDir
    | RuleDir

ModuleDir =
    'module' Name '{' Stmt* '}'

ExtendModuleDir =
    'extend-module' Name '{' Stmt* '}'

DomainDir =
    'domain' SortDecl

DomainsDir =
    'domains' (SortDecl (',' SortDecl)*)

IdentSortDecl =
    Name

CompoundSortDecl =
    '(' IdentSortDecl* ')'

SortDecl =
    IdentSortDecl
    | CompoundSortDecl

ConstantDeclareDir =
    InfixConstantDeclare
    | PrefixConstantDeclare

InfixConstantDeclare =
    'declare' (Name (',' Name)*) ':' Sort

PrefixConstantDeclare =
    '(' 'declare' PrefixDeclareSymbols Sort ')'

PrefixDeclareDir =
    '(' 'declare' PrefixDeclareSymbols '(' PrefixSortVarsDecl?  '->' '(' Sort* ')' Sort ')' PrefixDeclareAttrs? ')'

PrefixDeclareSymbols =
    PrefixSingleSymbol
    | PrefixMultiSymbols

PrefixSingleSymbol =
    Name

PrefixMultiSymbols =
    '(' Name* ')'

PrefixDeclareAttrs =
    '(' DeclareAttr* InputTransformDecl? ')'

DeclareDir =
    PrefixDeclareDir
    | InfixDeclareDir

InfixDeclareDir =
    'declare' (Name (',' Name)*) ':' SortVarsDecl? FuncSorts '->' return_sort:Sort DeclareAttrs?

InputTransformDecl =
    '[' Expr Expr* ']'

DeclareAttr =
    'left-assoc'
    | 'right-assoc'
    | Name

DeclareAttrs =
    '[' DeclareAttr* InputTransformDecl? ']'

FuncSorts =
    '[' Sort* ']'

SortVarsDecl =
    '(' (IdentSortDecl (',' IdentSortDecl)*) ')'

PrefixSortVarsDecl =
    '(' IdentSortDecl* ')'

DefineDir =
    InfixDefineDir
    | PrefixDefineDir

PrefixDefineDir =
    PrefixDefine
    | PrefixDefineBlocks

PrefixDefine =
    '(' 'define' DefineName define_body:Phrase ')'

PrefixDefineBlocks =
    '(' 'define' PrefixDefineBlock* ')'

InfixDefineDir =
    'private'? 'define' DefineName ':=' define_body:Phrase

DefineName =
    Name
    | DefineNamedPattern
    | DefineProc
    | ListPat

DefineNamedPattern =
    '(' Name 'as' ListPat ')' 

DefineProc = 
    '(' Name args:MaybeWildcardTypedParam* ')'

LoadDir =
    '('? 'load' 'string' ')'? // can be surrounded by parens

AssertDir = 
    InfixAssertDir
    | PrefixAssertDir

InfixAssertDir =
    'assert' (Name ':=')? (Expr (',' Expr)*) // TODO: validate that it's either named or comma separated

PrefixAssertDir =
    '(' 'assert' (Name ':=')? Expr* ')' // TODO: validate that it's either named or multiple

AssertClosedDir =
    'assert*' (Name ':=')? Expr

OpenDir =
    'open' (NameRef (',' NameRef)*)

AssociativityDir =
    ('left-assoc' | 'right-assoc') NameRef

RuleDir =
    InfixRuleDir
    | PrefixRuleDir

InfixRuleDir =
    'primitive-method' '(' Name MaybeWildcardTypedParam* ')' ':=' Expr

PrefixRuleDir =
    '(' 'primitive-method' '(' Name MaybeWildcardTypedParam* ')' Expr ')'

ExpandInputDir =
    'expand-input' (Phrase (',' Phrase)*) expander:Phrase

DefineSortDir =
    'define-sort' Name ':=' Sort

PrefixDefineBlock =
    DefineProc ':='? define_body:Phrase

SetPrecedenceDir = // if multiple idents, must be surrounded by parens
    '('? 'set-precedence' '('? NameRef* ')'? Expr ')'? // can be surrounded by parens

PhrasePair =
    '(' Phrase Phrase ')'

OverloadDir =
    OverloadSingle
    | OverloadMulti

OverloadSingle =
    '('? 'overload' Phrase Phrase ')'?

OverloadMulti =
    '('? 'overload' PhrasePair* ')'?

//****************************//
// Expressions and Deductions //
//****************************//

Phrase =
    Expr
    | Ded

Expr =
    IdentExpr // ✅
    | LiteralExpr // ✅
    | UnitExpr // ✅
    | TermVarExpr // ✅
    | MetaIdent // ✅
    | CheckExpr // ✅
    | LambdaExpr // ✅
    | ApplicationExpr // ✅
    | ListExpr // ✅
    | MethodExpr
    | LetExpr // ✅
    | LetRecExpr // ✅
    | MatchExpr // ✅
    | TryExpr // ✅
    | CellExpr // ✅
    | SetExpr // ✅
    | RefExpr // ✅
    | WhileExpr // ✅
    | MakeVectorExpr // ✅
    | VectorSubExpr // ✅
    | VectorSetExpr // ✅
    | SeqExpr // ✅
    | AndExpr // ✅
    | OrExpr // ✅
    | MapExpr
    | WildcardExpr
    | PrefixCheckExpr

IdentExpr =
    NameRef (':' Sort)?

LiteralExpr =
    Literal

UnitExpr =
    '(' ')'

MetaIdentExpr =
    MetaIdent

TermVarExpr =
    '?' 'ident' (':' Sort)?

WildcardExpr =
    '_'

CheckExpr =
    'check' '{' CheckArm* '}'

CheckArm = 
    '|'? Phrase '=>' Expr

PrefixCheckExpr =
    '(' 'check' CheckClause* ')'

CheckClause =
    '(' Phrase Expr ')'

LambdaExpr =
    'lambda' '(' MaybeWildcardTypedParam* ')' Expr

ApplicationExpr =
    '(' Expr Phrase* ')'

ListExpr =
    '[' Phrase* ']'

MethodExpr =
    'method' '(' MaybeWildcardTypedParam* ')' Ded

PrefixLetExpr =
    '(' 'let' '(' PrefixBinding* ')' Expr ')' 

LetExpr =
    'let' '{' LetPart* '}' Expr

PrefixLetRecExpr =
    '(' 'letrec' '(' PrefixBinding* ')' Expr ')'

LetRecExpr =
    'letrec' '{' LetRecPart* '}' Expr

MatchExpr =
    InfixMatchExpr
    | PrefixMatchExpr

InfixMatchExpr =
    'match' Phrase '{' arms:MatchArm* '}'

PrefixMatchExpr =
    '(' 'match' Phrase clauses:MatchClause* ')'

MatchArm = 
    '|'? Pat '=>' Expr

MatchClause =
    '(' Pat Expr ')'

TryExpr =
    'try' '{' TryArm* '}'

TryArm =
    '|'? Expr

PrefixTryExpr =
    '(' 'try' Expr* ')' // TODO: validation of >=1 expr

CellExpr =
    'cell' Phrase

SetExpr =
    'set!' Expr Phrase

RefExpr =
    'ref' Expr

WhileExpr =
    'while' Phrase Expr

MakeVectorExpr =
    'make-vector' Expr Phrase

VectorSubExpr =
    'vector-sub' Expr Expr

VectorSetExpr =
    'vector-set!' Expr Expr Phrase

SeqExpr =
    '(' 'seq' Phrase* ')'

AndExpr =
    '(' '&&' Phrase* ')' // also can be infix but it doesn't affect the tree

OrExpr =
    '(' '||' Phrase* ')' // also can be infix but it doesn't affect the tree

MapExpr =
    '|{' (MapBinding (',' MapBinding)*) '}|'

MapBinding =
    Phrase ':=' Phrase

//************//
// Deductions //
//************//

Ded = 
    MethodCallDed // ✅
    | BangMethodCallDed // ✅
    | AssumeDed // ✅
    | NamedAssumeDed // ✅
    | ProofByContraDed // ✅
    | GeneralizeOverDed // ✅
    | PickAnyDed // ✅
    | WithWitnessDed // ✅
    | PickWitnessDed // ✅
    | PickWitnessesDed // ✅
    | InductDed // ✅
    | CasesDed // ✅
    | CheckDed // ✅
    | MatchDed // ✅
    | LetDed // ✅
    | LetRecDed // ✅
    | TryDed // ✅
    | ConcludeDed
    | InferBlockDed
    | PrefixAssumeDed
    | SeqDed

ConcludeDed =
    '('? 'conclude' (Name ':=')? Expr Ded ')'?

MethodCallDed =
    '(' 'apply-method' Expr Phrase* ')'

BangMethodCallDed =
    '(' '!' Expr Phrase* ')'

AssumeDed =
    'assume' Phrase Ded

NamedAssumeDed =
    'assume' AssumePart* Ded

AssumePart =
    ';'? Name ':=' Phrase

PrefixAssumeDed =
    PrefixNamedAssumeDed
    | PrefixSingleAssumeDed
    | PrefixAssumeLetDed

PrefixNamedAssumeDed =
    '(' 'assume' Name ':=' Phrase Ded ')'

PrefixSingleAssumeDed =
    '(' 'assume' Phrase Ded ')'

PrefixAssumeLetDed =
    '(' 'assume-let' PrefixBinding Ded ')'

ProofByContraDed =
    'suppose-absurd' Phrase Ded

GeneralizeOverDed =
    'generalize-over' Expr Ded

PickAnyDed =
    '('? 'pick-any' MaybeTypedParam* Ded ')'?

WithWitnessDed =
    'with-witness' Expr Phrase Ded

PickWitnessDed =
    '('? 'pick-witness' Name 'for'? Phrase Name? Ded ')'? // for is mandatory if no parens

PickWitnessesDed =
    'pick-witnesses' Name Name* 'for' Phrase Name? Ded

InductDed =
    'by-induction' Phrase '{' RestrictedMatchDed* '}'

RestrictedMatchDed =
    '|'? Pat '=>' Ded

CasesDed =
    'datatype-cases' Phrase ('on' Expr)? '{' RestrictedMatchDed* '}'

CheckDedClause =
    '(' Phrase Ded ')'

CheckDed =
    InfixCheckDed
    | PrefixCheckDed

PrefixCheckDed =
    '(' 'dcheck' CheckDedClause* ')'

InfixCheckDed =
    'check' '{' arms:CheckDedArm* '}'

CheckDedArm =
    '|'? Phrase '=>' Ded

MatchDed =
    InfixMatchDed
    | PrefixMatchDed

InfixMatchDed =
    'match' Phrase '{' arms:MatchDedArm* '}'

PrefixMatchDed =
    '(' 'dmatch' Phrase clauses:MatchDedClause* ')'

MatchDedClause = 
    '(' Pat Ded ')'

MatchDedArm =
    '|'? Pat '=>' Ded

InfixLetDed =
    'let' '{' LetPart* '}' Ded

LetPart =
    ';'? Pat ':=' Phrase

InfixLetRecDed =
    'letrec' '{' LetRecPart* '}' Ded

LetDed = 
    InfixLetDed
    | PrefixLetDed

LetRecDed = 
    InfixLetRecDed
    | PrefixLetRecDed

PrefixLetDed =
    '(' 'dlet' '(' PrefixBinding* ')' Ded ')'

PrefixLetRecDed =
    '(' 'dletrec' '(' PrefixBinding* ')' Ded ')'

LetRecPart = 
    ';'? Name ':=' Expr

TryDed =
    InfixTryDed
    | PrefixTryDed

InfixTryDed =
    'try' '{' TryDedArm* '}'

PrefixTryDed =
    '(' 'dtry' Ded* ')'

TryDedArm =
    '|'? Ded

InferBlockDed =
    ('{' | 'begin') (MaybeNamedInference (';' MaybeNamedInference )*) ('}' | 'end')

MaybeNamedInference =
    (MaybeWildcardOpAnnotatedParam ':=')? InferOrExpr

InferOrExpr =
    Inference
    | Expr

MaybeWildcardOpAnnotatedParam =
    '_'
    | OpAnnotatedParam
    | Name

Inference =
    InferFrom
    | InferBy
    | Ded

InferFrom =
    Expr 'from' (Phrase (',' Phrase)*)

InferBy =
    Expr ('by' by_expr:Expr)? 'on' (Phrase (',' Phrase)*)

ByDed =
    '(' Phrase 'by' Ded ')' 

SeqDed = 
    '(' 'dseq' Ded* ')'

//**********//
// Patterns //
//**********//

Pat =
    IdentPat // ✅
    | VarPat // ✅
    | MetaIdentPat // ✅
    | LiteralPat // ✅
    | UnitPat // ✅
    | NamedPat // ✅
    | ValOfPat // ✅
    | ListOfPat // ✅
    | SplitPat // ✅
    | ListPat // ✅
    | CompoundPat // ✅
    | WherePat // ✅
    | SomeThingPat // ✅

IdentPat =
    MaybeWildcardTypedParam

VarPat =
    '?' 'ident' ':' Sort

LiteralPat =
    Literal

MetaIdentPat =
    MetaIdent

UnitPat =
    Unit

NamedPat =
    '(' ('bind' | 'as') Name Pat ')'
    | '(' Name ('bind' | 'as') Pat ')'

ValOfPat =
    '(' 'val-of' NameRef ')'

ListOfPat =
    '(' 'list-of' Pat Pat ')'

SplitPat =
    '(' 'split' first:Pat second:Pat rest:Pat* ')'

ListPat =
    '[' Pat* ']'

CompoundPat =
    '(' Pat* ')'

WherePat =
    '(' Pat 'where' Expr ')'

OrPat =
    '(' '||' Pat* ')'

SomeThing =
    'some-var'
    | 'some-sent-con'
    | 'some-quant'
    | 'some-term'
    | 'some-atom'
    | 'some-sentence'
    | 'some-list'
    | 'some-cell'
    | 'some-vector'
    | 'some-proc'
    | 'some-method'
    | 'some-symbol'
    | 'some-table'
    | 'some-map'
    | 'some-sub'
    | 'some-char'

SomeThingPat =
    '(' SomeThing IdentPat ')'