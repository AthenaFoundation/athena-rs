---
source: crates/parser/src/tests.rs
description: "by-induction f_x_less_than {\n    zero => conclude base_case := (factorial (zero - one) <= factorial zero)\n                (!force base_case)\n\n\n    | (m as (S n)) => conclude inductive_step := ((factorial (m - one)) <= (factorial m))\n                (!force inductive_step)\n}\n"
input_file: crates/parser/test_data/parser/inline/ok/ded/0091_induct_ded_multiple.ath
---
INDUCT_DED
  BY_INDUCTION_KW "by-induction"
  WHITESPACE " "
  IDENT_EXPR
    NAME_REF
      IDENT "f_x_less_than"
  WHITESPACE " "
  L_CURLY "{"
  WHITESPACE "\n    "
  RESTRICTED_MATCH_DED
    IDENT_PAT
      NAME
        IDENT "zero"
    WHITESPACE " "
    FAT_ARROW "=>"
    WHITESPACE " "
    CONCLUDE_DED
      CONCLUDE_KW "conclude"
      WHITESPACE " "
      NAME
        IDENT "base_case"
      WHITESPACE " "
      COLON_EQ ":="
      WHITESPACE " "
      APPLICATION_EXPR
        L_PAREN "("
        IDENT_EXPR
          NAME_REF
            IDENT "factorial"
        WHITESPACE " "
        APPLICATION_EXPR
          L_PAREN "("
          IDENT_EXPR
            NAME_REF
              IDENT "zero"
          WHITESPACE " "
          IDENT_EXPR
            NAME_REF
              IDENT "-"
          WHITESPACE " "
          IDENT_EXPR
            NAME_REF
              IDENT "one"
          R_PAREN ")"
        WHITESPACE " "
        IDENT_EXPR
          NAME_REF
            IDENT "<="
        WHITESPACE " "
        IDENT_EXPR
          NAME_REF
            IDENT "factorial"
        WHITESPACE " "
        IDENT_EXPR
          NAME_REF
            IDENT "zero"
        R_PAREN ")"
      WHITESPACE "\n                "
      BANG_METHOD_CALL_DED
        L_PAREN "("
        BANG "!"
        IDENT_EXPR
          NAME_REF
            IDENT "force"
        WHITESPACE " "
        IDENT_EXPR
          NAME_REF
            IDENT "base_case"
        R_PAREN ")"
  WHITESPACE "\n\n\n    "
  RESTRICTED_MATCH_DED
    PIPE "|"
    WHITESPACE " "
    NAMED_PAT
      L_PAREN "("
      NAME
        IDENT "m"
      WHITESPACE " "
      AS_KW "as"
      WHITESPACE " "
      COMPOUND_PAT
        L_PAREN "("
        IDENT_PAT
          NAME
            IDENT "S"
        WHITESPACE " "
        IDENT_PAT
          NAME
            IDENT "n"
        R_PAREN ")"
      R_PAREN ")"
    WHITESPACE " "
    FAT_ARROW "=>"
    WHITESPACE " "
    CONCLUDE_DED
      CONCLUDE_KW "conclude"
      WHITESPACE " "
      NAME
        IDENT "inductive_step"
      WHITESPACE " "
      COLON_EQ ":="
      WHITESPACE " "
      APPLICATION_EXPR
        L_PAREN "("
        APPLICATION_EXPR
          L_PAREN "("
          IDENT_EXPR
            NAME_REF
              IDENT "factorial"
          WHITESPACE " "
          APPLICATION_EXPR
            L_PAREN "("
            IDENT_EXPR
              NAME_REF
                IDENT "m"
            WHITESPACE " "
            IDENT_EXPR
              NAME_REF
                IDENT "-"
            WHITESPACE " "
            IDENT_EXPR
              NAME_REF
                IDENT "one"
            R_PAREN ")"
          R_PAREN ")"
        WHITESPACE " "
        IDENT_EXPR
          NAME_REF
            IDENT "<="
        WHITESPACE " "
        APPLICATION_EXPR
          L_PAREN "("
          IDENT_EXPR
            NAME_REF
              IDENT "factorial"
          WHITESPACE " "
          IDENT_EXPR
            NAME_REF
              IDENT "m"
          R_PAREN ")"
        R_PAREN ")"
      WHITESPACE "\n                "
      BANG_METHOD_CALL_DED
        L_PAREN "("
        BANG "!"
        IDENT_EXPR
          NAME_REF
            IDENT "force"
        WHITESPACE " "
        IDENT_EXPR
          NAME_REF
            IDENT "inductive_step"
        R_PAREN ")"
  WHITESPACE "\n"
  R_CURLY "}"
  WHITESPACE "\n"

