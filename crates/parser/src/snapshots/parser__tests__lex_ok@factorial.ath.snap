---
source: crates/parser/src/tests.rs
description: "load \"nat-minus\"\nload \"nat-minus\"\n\nmodule Factorial {\n\n   # define [< - * one <=] := [N.< N.- N.* N.one N.<= ]\n\n    declare factorial: [N] -> N [[int->nat]]\n    (transform-output eval [nat->int])\n    \n    assert f_zero := (forall x . x = zero ==> factorial x = one)\n\n    assert f_x := (forall x . one < x ==> (factorial x) = (x * (factorial (x - one))))\n\n    assert f_one := (forall x . one = x ==> (factorial x) = one)\n\n    (eval (factorial 4))\n    (eval (factorial 5))\n\n    define nothing-less-than-zero := (forall x . ~ x < zero)\n    \n    define f_x_less_than := (forall x . factorial (x - one) <= factorial x )\n    define lte-def := (forall x y . (x <= y <==> x < y | x = y))\n\n\tdefine foo := bar\n    by-induction f_x_less_than {\n        zero => conclude base_case := (factorial (zero - one) <= factorial zero)\n                    (!force base_case)\n                        \n                    \n        | (m as (S n)) => conclude inductive_step := ((factorial (m - one)) <= (factorial m))\n                    (!force inductive_step)\n    }\n\n}"
input_file: crates/parser/test_data/lexer/ok/factorial.ath
---
LOAD_KW "load"
WHITESPACE " "
STRING "\"nat-minus\""
WHITESPACE "\n"
LOAD_KW "load"
WHITESPACE " "
STRING "\"nat-minus\""
WHITESPACE "\n\n"
MODULE_KW "module"
WHITESPACE " "
IDENT "Factorial"
WHITESPACE " "
L_CURLY "{"
WHITESPACE "\n\n   "
COMMENT "# define [< - * one <=] := [N.< N.- N.* N.one N.<= ]"
WHITESPACE "\n\n    "
DECLARE_KW "declare"
WHITESPACE " "
IDENT "factorial"
COLON ":"
WHITESPACE " "
L_BRACK "["
IDENT "N"
R_BRACK "]"
WHITESPACE " "
THIN_ARROW "->"
WHITESPACE " "
IDENT "N"
WHITESPACE " "
L_BRACK "["
L_BRACK "["
IDENT "int->nat"
R_BRACK "]"
R_BRACK "]"
WHITESPACE "\n    "
L_PAREN "("
IDENT "transform-output"
WHITESPACE " "
IDENT "eval"
WHITESPACE " "
L_BRACK "["
IDENT "nat->int"
R_BRACK "]"
R_PAREN ")"
WHITESPACE "\n    \n    "
ASSERT_KW "assert"
WHITESPACE " "
IDENT "f_zero"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
IDENT "forall"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "."
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "="
WHITESPACE " "
IDENT "zero"
WHITESPACE " "
IDENT "==>"
WHITESPACE " "
IDENT "factorial"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "="
WHITESPACE " "
IDENT "one"
R_PAREN ")"
WHITESPACE "\n\n    "
ASSERT_KW "assert"
WHITESPACE " "
IDENT "f_x"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
IDENT "forall"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "."
WHITESPACE " "
IDENT "one"
WHITESPACE " "
IDENT "<"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "==>"
WHITESPACE " "
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
IDENT "x"
R_PAREN ")"
WHITESPACE " "
IDENT "="
WHITESPACE " "
L_PAREN "("
IDENT "x"
WHITESPACE " "
IDENT "*"
WHITESPACE " "
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
L_PAREN "("
IDENT "x"
WHITESPACE " "
IDENT "-"
WHITESPACE " "
IDENT "one"
R_PAREN ")"
R_PAREN ")"
R_PAREN ")"
R_PAREN ")"
WHITESPACE "\n\n    "
ASSERT_KW "assert"
WHITESPACE " "
IDENT "f_one"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
IDENT "forall"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "."
WHITESPACE " "
IDENT "one"
WHITESPACE " "
IDENT "="
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "==>"
WHITESPACE " "
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
IDENT "x"
R_PAREN ")"
WHITESPACE " "
IDENT "="
WHITESPACE " "
IDENT "one"
R_PAREN ")"
WHITESPACE "\n\n    "
L_PAREN "("
IDENT "eval"
WHITESPACE " "
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
IDENT "4"
R_PAREN ")"
R_PAREN ")"
WHITESPACE "\n    "
L_PAREN "("
IDENT "eval"
WHITESPACE " "
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
IDENT "5"
R_PAREN ")"
R_PAREN ")"
WHITESPACE "\n\n    "
DEFINE_KW "define"
WHITESPACE " "
IDENT "nothing-less-than-zero"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
IDENT "forall"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "."
WHITESPACE " "
IDENT "~"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "<"
WHITESPACE " "
IDENT "zero"
R_PAREN ")"
WHITESPACE "\n    \n    "
DEFINE_KW "define"
WHITESPACE " "
IDENT "f_x_less_than"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
IDENT "forall"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "."
WHITESPACE " "
IDENT "factorial"
WHITESPACE " "
L_PAREN "("
IDENT "x"
WHITESPACE " "
IDENT "-"
WHITESPACE " "
IDENT "one"
R_PAREN ")"
WHITESPACE " "
IDENT "<="
WHITESPACE " "
IDENT "factorial"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
R_PAREN ")"
WHITESPACE "\n    "
DEFINE_KW "define"
WHITESPACE " "
IDENT "lte-def"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
IDENT "forall"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "y"
WHITESPACE " "
IDENT "."
WHITESPACE " "
L_PAREN "("
IDENT "x"
WHITESPACE " "
IDENT "<="
WHITESPACE " "
IDENT "y"
WHITESPACE " "
IDENT "<==>"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "<"
WHITESPACE " "
IDENT "y"
WHITESPACE " "
IDENT "|"
WHITESPACE " "
IDENT "x"
WHITESPACE " "
IDENT "="
WHITESPACE " "
IDENT "y"
R_PAREN ")"
R_PAREN ")"
WHITESPACE "\n\n\t"
DEFINE_KW "define"
WHITESPACE " "
IDENT "foo"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
IDENT "bar"
WHITESPACE "\n    "
BY_INDUCTION_KW "by-induction"
WHITESPACE " "
IDENT "f_x_less_than"
WHITESPACE " "
L_CURLY "{"
WHITESPACE "\n        "
IDENT "zero"
WHITESPACE " "
FAT_ARROW "=>"
WHITESPACE " "
CONCLUDE_KW "conclude"
WHITESPACE " "
IDENT "base_case"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
L_PAREN "("
IDENT "zero"
WHITESPACE " "
IDENT "-"
WHITESPACE " "
IDENT "one"
R_PAREN ")"
WHITESPACE " "
IDENT "<="
WHITESPACE " "
IDENT "factorial"
WHITESPACE " "
IDENT "zero"
R_PAREN ")"
WHITESPACE "\n                    "
L_PAREN "("
BANG "!"
IDENT "force"
WHITESPACE " "
IDENT "base_case"
R_PAREN ")"
WHITESPACE "\n                        \n                    \n        "
IDENT "|"
WHITESPACE " "
L_PAREN "("
IDENT "m"
WHITESPACE " "
AS_KW "as"
WHITESPACE " "
L_PAREN "("
IDENT "S"
WHITESPACE " "
IDENT "n"
R_PAREN ")"
R_PAREN ")"
WHITESPACE " "
FAT_ARROW "=>"
WHITESPACE " "
CONCLUDE_KW "conclude"
WHITESPACE " "
IDENT "inductive_step"
WHITESPACE " "
COLON_EQ ":="
WHITESPACE " "
L_PAREN "("
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
L_PAREN "("
IDENT "m"
WHITESPACE " "
IDENT "-"
WHITESPACE " "
IDENT "one"
R_PAREN ")"
R_PAREN ")"
WHITESPACE " "
IDENT "<="
WHITESPACE " "
L_PAREN "("
IDENT "factorial"
WHITESPACE " "
IDENT "m"
R_PAREN ")"
R_PAREN ")"
WHITESPACE "\n                    "
L_PAREN "("
BANG "!"
IDENT "force"
WHITESPACE " "
IDENT "inductive_step"
R_PAREN ")"
WHITESPACE "\n    "
R_CURLY "}"
WHITESPACE "\n\n"
R_CURLY "}"

